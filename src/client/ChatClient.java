// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.client.ObservableClient;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   ObservableClient obsClient;  String id;  int port;  String host;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI, String id)     throws IOException   {    this.port = port;    this.host = host;    this.clientUI = clientUI;    this.id = id;    this.obsClient = new ObservableClient(host, port);    obsClient.addObserver(this);  }    //Instance methods ************************************************  protected void connectionClosed() {	  clientUI.display("The connection to the server has benn succefully closed");  }    protected void connectionException(Exception exception) {	  clientUI.display("Connection interrupted...");  }      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {	if(message.startsWith("#")){		String[] messsplit = message.split(" ");		switch(messsplit[0]){			case "#quit":				clientUI.display("Arrêt du client...");				quit();				break;			case "#logoff":				try {					clientUI.display("Déconnexion du serveur ...");					obsClient.closeConnection();					clientUI.display("Déconnexion réussie");				} catch (IOException e) {					clientUI.display("Déconnexion impossible ...");					// TODO Auto-generated catch block					e.printStackTrace();				}				break;			case "#sethost":				if(messsplit[1] == null){					clientUI.display("Hôte manquant ...");				} else if(obsClient.isConnected()){					clientUI.display("Déconnectez vous du serveur avant de changer d'hôte ...");				} else {					this.host = messsplit[1];					clientUI.display("Hôte changé avec succès !");				}				break;			case "#setport":				if(messsplit[1] == null){					clientUI.display("Port manquant ...");				} else if(obsClient.isConnected()){					clientUI.display("Déconnectez vous du serveur avant de changer de port ...");				} else {					port = Integer.parseInt(messsplit[1]);					clientUI.display("Port changé avec succès !");				}				break;			case "#login":				if(obsClient.isConnected()){					clientUI.display("Vous êtes déjà connecté ...");				} else {					try {						obsClient.openConnection();						obsClient.sendToServer("#login "+ this.id);						clientUI.display("Vous êtes maintenant loggé au serveur...");					} catch (IOException e) {						clientUI.display("Problème d'accès au serveur ...");						// TODO Auto-generated catch block						e.printStackTrace();					}				}				break;			case "#getport":				clientUI.display("Port " + this.port);				break;			case "#gethost":				clientUI.display("Hôte " + this.host);				break;		}	}else{		try {			obsClient.sendToServer(message);		} catch(IOException e) {	      clientUI.display	        ("Could not send message to server.  Terminating client.");			try {				obsClient.closeConnection();			} catch (IOException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}	      	    }	}  }    /**   * This method terminates the client.   */  public void quit()  {    try    {    	obsClient.closeConnection();    }    catch(IOException e) {}    System.exit(0);  }		@Override	public void update(Observable arg0, Object arg1) {		if(arg1.toString().equals("#OC:Connection closed.")) {			this.connectionClosed();		} else if(arg1.toString().equals("#OC:Connection established.")) {			clientUI.display("Connexion établie !");		} else if(arg1.getClass().equals(Exception.class)) {			this.connectionException((Exception)arg1);		} else {			this.handleMessageFromServer((String)arg1);		}	}}//End of ChatClient class